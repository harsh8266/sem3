To write a code to solve graph tree colouring problem using back- tracking

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Function to check if it's safe to color a vertex with a given color
int isSafe(int v, int graph[MAX_VERTICES][MAX_VERTICES], int vertices, int colors[], int c) {
    for (int i = 0; i < vertices; i++) {
        if (graph[v][i] && c == colors[i]) {
            return 0; // The color is already used by an adjacent vertex
        }
    }
    return 1; // It's safe to color the vertex with this color
}

// Recursive function to perform backtracking and solve the coloring problem
int graphColoringUtil(int graph[MAX_VERTICES][MAX_VERTICES], int vertices, int m, int colors[], int v) {
    if (v == vertices) {
        // All vertices are colored
        return 1;
    }

    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, vertices, colors, c)) {
            colors[v] = c; // Assign color c to vertex v

            // Recur for the next vertices
            if (graphColoringUtil(graph, vertices, m, colors, v + 1)) {
                return 1; // If the assignment leads to a solution, return true
            }

            // If assigning color c doesn't lead to a solution, backtrack
            colors[v] = 0;
        }
    }

    return 0; // No color can be assigned to this vertex
}

// Function to solve the graph coloring problem using backtracking
void graphColoring(int graph[MAX_VERTICES][MAX_VERTICES], int vertices, int m) {
    int colors[MAX_VERTICES] = {0}; // Initialize colors to 0

    if (graphColoringUtil(graph, vertices, m, colors, 0)) {
        printf("Solution exists. The vertex colors are:\n");
        for (int i = 0; i < vertices; i++) {
            printf("Vertex %d: Color %d\n", i + 1, colors[i]);
        }
    } else {
        printf("Solution does not exist.\n");
    }
}

int main() {
    int vertices, edges, m;

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    // Assuming the input graph is an undirected tree
    // Therefore, the number of edges is vertices - 1
    edges = vertices - 1;

    int graph[MAX_VERTICES][MAX_VERTICES] = {0};

    printf("Enter the edges (vertex pairs):\n");
    for (int i = 0; i < edges; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        graph[u - 1][v - 1] = 1;
        graph[v - 1][u - 1] = 1; // Assuming an undirected tree
    }

    printf("Enter the number of colors: ");
    scanf("%d", &m);

    graphColoring(graph, vertices, m);

    return 0;
}


Write a C code to implement fractional knapsack problem using
greedy method.

#include <stdio.h>
#include <stdlib.h>

// Structure to represent items
struct Item {
    int value;
    int weight;
};

// Function to compare items based on their value per unit weight
int compareItems(const void *a, const void *b) {
    double ratioA = (double)(((struct Item *)a)->value) / ((struct Item *)a)->weight;
    double ratioB = (double)(((struct Item *)b)->value) / ((struct Item *)b)->weight;
    return (ratioB > ratioA) ? 1 : -1; // Sort in non-decreasing order of value per unit weight
}

// Function to solve the fractional knapsack problem using the greedy method
void fractionalKnapsack(struct Item items[], int n, int capacity) {
    // Sort items based on value per unit weight
    qsort(items, n, sizeof(struct Item), compareItems);

    int *selected = (int *)calloc(n, sizeof(int)); // Array to store selected items

    int currentWeight = 0; // Current weight in the knapsack
    double totalValue = 0.0; // Total value of selected items

    // Iterate through sorted items and add to the knapsack until capacity is reached
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            // Add the whole item if it fits
            selected[i] = 1;
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // Add a fraction of the item if it doesn't fit completely
            double fraction = (double)(capacity - currentWeight) / items[i].weight;
            selected[i] = fraction;
            currentWeight += (int)(fraction * items[i].weight);
            totalValue += fraction * items[i].value;
            break; // Stop after adding a fraction
        }
    }

    // Display the selected items and total value
    printf("Selected items:\n");
    for (int i = 0; i < n; i++) {
        if (selected[i]) {
            printf("Item %d - Fraction %.2lf\n", i + 1, selected[i]);
        }
    }

    printf("Total value in the knapsack: %.2lf\n", totalValue);

    // Free dynamically allocated memory
    free(selected);
}

int main() {
    int n, capacity;

    printf("Enter the number of items: ");
    scanf("%d", &n);

    struct Item *items = (struct Item *)malloc(n * sizeof(struct Item));

    printf("Enter the value and weight of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d %d", &items[i].value, &items[i].weight);
    }

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    fractionalKnapsack(items, n, capacity);

    // Free dynamically allocated memory
    free(items);

    return 0;
}

Write a C code to implement N Queen 8( queens) problem using Backtracking method.

#include <stdio.h>
#include <stdlib.h>

#define N 8

// Function to print the chessboard
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%c ", (board[i][j] == 1) ? 'Q' : '.');
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
int isSafe(int board[N][N], int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; i++) {
        if (board[row][i] == 1) {
            return 0;
        }
    }

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return 0;
        }
    }

    // Check lower diagonal on the left side
    for (int i = row, j = col; i < N && j >= 0; i++, j--) {
        if (board[i][j] == 1) {
            return 0;
        }
    }

    return 1; // If no conflicts, it's safe
}

// Recursive function to solve the N-Queens problem using backtracking
int solveNQueensUtil(int board[N][N], int col) {
    if (col >= N) {
        // All queens are placed, solution found
        printBoard(board);
        return 1;
    }

    int res = 0;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            // Place this queen in board[i][col]
            board[i][col] = 1;

            // Recur to place rest of the queens
            res = solveNQueensUtil(board, col + 1) || res;

            // If placing queen in board[i][col] doesn't lead to a solution, backtrack
            board[i][col] = 0;
        }
    }

    return res;
}

// Function to solve the N-Queens problem
void solveNQueens() {
    int board[N][N] = {{0}};

    if (!solveNQueensUtil(board, 0)) {
        printf("Solution does not exist.\n");
    }
}

int main() {
    solveNQueens();
    return 0;
}
